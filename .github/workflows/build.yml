name: Test and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install VLC (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y vlc libvlc-dev
    
    - name: Install VLC (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install --cask vlc
    
    - name: Install VLC (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install vlc -y
        echo "C:\\Program Files\\VideoLAN\\VLC" >> $env:GITHUB_PATH
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Test package structure (without full import)
      run: |
        python -c "
        import sys
        import os
        import qrew
        print(f'Package location: {qrew.__file__}')
        print(f'Package directory contents:')
        for item in os.listdir(os.path.dirname(qrew.__file__)):
            print(f'  {item}')
        print('[OK] Package structure OK')
        "
    
    - name: Test main entry point
      run: |
        python -c "
        try:
            from qrew.main import main
            print('[OK] Main entry point accessible')
        except Exception as e:
            print(f'[WARN]  Main import issue (may be VLC-related): {e}')
            # This is acceptable in CI - just test the function exists
            import qrew.main
            assert hasattr(qrew.main, 'main')
            print('[OK] Main function exists')
        "

  build-python:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        python -m twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-dist
        path: dist/

  release:
    needs: [test, build-python]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-dist
        path: dist/
    
    - name: Get version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Qrew ${{ steps.version.outputs.version }}
        body: |
          ## Qrew ${{ steps.version.outputs.version }}
          
          ### Installation
          ```bash
          pip install qrew
          ```
          
          ### Requirements
          - Python 3.8+
          - VLC Media Player (must be installed separately)
          - REW (Room EQ Wizard) for measurements
          
          ### Binary Downloads
          Pre-compiled binaries are available for download from the [main repository releases](https://github.com/docdude/Qrew_pro/releases):
          - Windows: `.exe` installer
          - macOS: Universal `.dmg` (Intel + Apple Silicon)
          - Linux: `.deb`, `.rpm`, `.tar.gz`
          
          ### Changes
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: false
    
    - name: Upload Python packages to release
      run: |
        for file in dist/*; do
          gh release upload ${{ steps.version.outputs.version }} "$file"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pypi-publish:
    needs: [test, build-python]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: pypi
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: dist/
